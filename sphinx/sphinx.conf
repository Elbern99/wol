#############################################################################
## data source definition
#############################################################################

source mainSource
{
    type                = mysql
    sql_host            = localhost
    sql_user            = root
    sql_pass            = cdtn.yznjh
    sql_db              = iza
    sql_port            = 3306

    sql_query_pre       = SET NAMES utf8
}

source articlesSource : mainSource
{
       sql_query           = \
                              SELECT `a`.`id` as `id`, `a`.`article_number`, `a`.`version`, `a`.`max_version`, `a`.`seo`, `a`.`availability`, `a`.`title`, `a`.`publisher`, `author`.`surname`, `author`.`name`, `author`.`url`, 'article' as `type` FROM `article` as `a` \
                              left join  `article_author` as \
                              `au` on  `au`.`article_id` in (select `aa`.`id` FROM `article` `aa` WHERE `aa`.`article_number`=`a`.`article_number`) left join `author` on `author`.`id` = `au`.`author_id` \
                              WHERE `a`.`version`= `a`.`max_version`

        sql_attr_string      = seo
        sql_attr_string      = type
        sql_attr_uint      = version
        sql_attr_uint      = max_version
        sql_field_string     = availability
        sql_field_string     = title
        sql_field_string     = publisher
        sql_field_string     = surname
        sql_field_string     = name
        sql_field_string     = url

        sql_joined_field = value from query; \
        SELECT `a`.`id` as `id`, `ev`.`value` as `value` \
        FROM `article` as `a` \
        join `eav_type` as `et` \
        join `eav_attribute` as `ea` \
        left join `eav_entity` as `e` on `e`.`model_id` = `a`.`id` and `et`.`id` = `e`.`type_id` \
        left join `eav_type_attribute` on `ea`.`id` = `eav_type_attribute`.`attribute_id` AND `eav_type_attribute`.`type_id` = `et`.`id` \
        left join `eav_value` as `ev` on `ev`.`entity_id` = `e`.`id` and `ev`.`attribute_id` = `ea`.`id` \
        WHERE `et`.`name` = 'article' AND `ea`.`in_search` = 1 \
        ORDER BY `a`.`id` ASC

        sql_ranged_throttle     = 0

}

source expertSource : mainSource
{

        sql_query           = \
                              SELECT `a`.`id`, `a`.`name`, `a`.`url` FROM `author` as `a` join `author_roles` as `ar` on `a`.`id` = `ar`.`author_id` \
	              WHERE `ar`.`role_id` = 2

        sql_field_string     = name
        sql_field_string     = url

        sql_joined_field = value from query; \
        SELECT `a`.`id` as `id`, `ev`.`value` as `value` \
        FROM `author` as `a` \
        join `author_roles` as `ar` on `a`.`id` = `ar`.`author_id` \
        join `eav_type` as `et` \
        join `eav_attribute` as `ea` \
        left join `eav_entity` as `e` on `e`.`model_id` = `a`.`id` and `et`.`id` = `e`.`type_id` \
        left join `eav_type_attribute` on `ea`.`id` = `eav_type_attribute`.`attribute_id` AND `eav_type_attribute`.`type_id` = `et`.`id` \
        left join `eav_value` as `ev` on `ev`.`entity_id` = `e`.`id` and `ev`.`attribute_id` = `ea`.`id` \
        WHERE `et`.`name` = 'author' AND `ar`.`role_id` = 2 AND (`ea`.`in_search` = 1 OR `ea`.`name` IN('experience_type', 'language')) \
        ORDER BY `a`.`id` ASC
        
        sql_ranged_throttle     = 0

}

source biographySource : mainSource
{

        sql_query           = \
                              SELECT `id`, `name`, `url_key`, `url`, 'biography' as `type`, `name` as `title` FROM `author`

        sql_field_string     = name
        sql_field_string     = title
        sql_attr_string      = type
        sql_attr_string      = url_key
        sql_field_string     = url

        sql_joined_field = value from query; \
        SELECT `a`.`id` as `id`, `ev`.`value` as `value` \
    FROM `author` as `a` \
    join `eav_type` as `et` \
    join `eav_attribute` as `ea` \
    left join `eav_entity` as `e` on `e`.`model_id` = `a`.`id` and `et`.`id` = `e`.`type_id` \
    left join `eav_type_attribute` on `ea`.`id` = `eav_type_attribute`.`attribute_id` AND `eav_type_attribute`.`type_id` = `et`.`id` \
    left join `eav_value` as `ev` on `ev`.`entity_id` = `e`.`id` and `ev`.`attribute_id` = `ea`.`id` \
    WHERE `et`.`name` = 'author' AND `ea`.`in_search` = 1  AND `ev`.`value` IS NOT NULL \
    ORDER BY `a`.`id` ASC

        
        sql_ranged_throttle     = 0

}

source newsSource : mainSource
{

        sql_query          = \
                              SELECT `id`, `title`, `description`, `sources`, 'news' as `type` FROM `news`

        sql_attr_string     = type
        sql_field_string    = description
        sql_field_string    = title
        sql_field_string    = sources
  
        sql_ranged_throttle     = 0

}

source opinionsSource : mainSource
{

        sql_query           = \
                              SELECT `id`, `title`, `description`, 'opinions' as `type` FROM `opinions`

        sql_field_string    = description
        sql_field_string     = title
        sql_attr_string     = type

        sql_joined_field = name from query; \
        SELECT `o`.`id`, `oa`.`author_name` as `name` FROM `opinions` as `o` \
        join `opinion_authors` as `oa` on `o`.`id` = `oa`.`opinion_id` \
    ORDER BY `o`.`id` ASC
        
        sql_ranged_throttle     = 0

}

source eventsSource : mainSource
{

        sql_query          = \
                              SELECT `id`, `title`, `body`, `location`, 'events' as `type` FROM `events`

        sql_attr_string    = type
        sql_field_string   = body
        sql_field_string   = title
        sql_field_string   = location
  
        sql_ranged_throttle     = 0

}

source videosSource : mainSource
{

        sql_query          = \
                              SELECT `id`, `title`, `description`, 'videos' as `type` FROM `video`

        sql_field_string   = description
        sql_field_string   = title
        sql_attr_string    = type
  
        sql_ranged_throttle     = 0

}

source topicsSource : mainSource
{

        sql_query          = \
                              SELECT `id`, `title`, `description`, 'key_topics' as `type` FROM `topics`

        sql_field_string   = description
        sql_field_string   = title
        sql_attr_string    = type
  
        sql_ranged_throttle     = 0

}

source policypapersSource
{
    type                 = xmlpipe2
    xmlpipe_command      = cat /var/www/wol.iza.org/sphinxdoc/policypapers_dc.xml
    xmlpipe_field_string = title
    xmlpipe_field_string = description
    xmlpipe_field        = creator
    xmlpipe_attr_string  = type
}

source papersSource
{
    type                 = xmlpipe2
    xmlpipe_command      = cat /var/www/wol.iza.org/sphinxdoc/papers_dc.xml
    xmlpipe_field_string = title
    xmlpipe_field_string = description
    xmlpipe_field        = creator
    xmlpipe_attr_string  = type
}
#############################################################################
## index definition
#############################################################################

#
# this is an index which is stored locally in the filesystem
#
# all indexing-time options (such as morphology and charsets)
# are configured per local index
index articlesIndex
{
        # index type
        # optional, default is 'plain'
        # known values are 'plain', 'distributed', and 'rt' (see samples below)
        # type                  = plain

        source                  = articlesSource
        path                    = /var/lib/sphinxsearch/data/articlesIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = stem_en, lemmatize_en_all, lemmatize_de

        # minimum word length at which to enable stemming
        # optional, default is 1 (stem everything)
        #
        min_stemming_len      = 4


        # embedded file size limit
        # optional, default is 16K
        #
        # exceptions, wordforms, and stopwords files smaller than this limit
        # are stored in the index; otherwise, their paths and sizes are stored
        #
        # embedded_limit                = 16K

        # minimum indexed word length
        # default is 1 (index everything)
        min_word_len            = 3
        html_strip              = 1
        min_infix_len           = 2
        html_remove_elements    = style, script
        index_exact_words       = 1
}

index expertIndex
{
        source                  = expertSource
        path                    = /var/lib/sphinxsearch/data/expertIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = none

        # minimum word length at which to enable stemming
        # optional, default is 1 (stem everything)
        #
        min_stemming_len      = 4


        # embedded file size limit
        # optional, default is 16K
        #
        # exceptions, wordforms, and stopwords files smaller than this limit
        # are stored in the index; otherwise, their paths and sizes are stored
        #
        # embedded_limit                = 16K

        # minimum indexed word length
        # default is 1 (index everything)
        min_word_len            = 3
        html_strip              = 1
        ignore_chars            = U+208B
        regexp_filter           = \b([\w]+)_([\w]+)\b => \1\2 \1 \2
}

index biographyIndex
{

        source                  = biographySource
        path                    = /var/lib/sphinxsearch/data/biographyIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = stem_en, lemmatize_en_all, lemmatize_de

        min_stemming_len        = 4

        min_word_len            = 3
        html_strip              = 1
        min_infix_len           = 2
        ignore_chars            = U+208B
        regexp_filter           = \b([\w]+)_([\w]+)\b => \1\2 \1 \2
        index_exact_words       = 1

}

index newsIndex
{
        source                  = newsSource
        path                    = /var/lib/sphinxsearch/data/newsIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = lemmatize_en_all, lemmatize_de

        min_word_len            = 3
        html_strip              = 1
        min_stemming_len        = 4
        min_infix_len           = 2
        index_exact_words       = 1
}

index opinionsIndex
{
        source                  = opinionsSource
        path                    = /var/lib/sphinxsearch/data/opinionsIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = lemmatize_en_all, lemmatize_de

        min_word_len            = 3
        html_strip              = 1
        min_stemming_len        = 4
        min_infix_len           = 2
        index_exact_words       = 1
}

index eventsIndex
{
        source                  = eventsSource
        path                    = /var/lib/sphinxsearch/data/eventsIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = lemmatize_en_all, lemmatize_de

        min_word_len            = 3
        html_strip              = 1
        min_stemming_len        = 4
        min_infix_len           = 2
        index_exact_words       = 1
}

index videosIndex
{
        source                  = videosSource
        path                    = /var/lib/sphinxsearch/data/videosIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = lemmatize_en_all, lemmatize_de

        min_word_len            = 3
        html_strip              = 1
        min_stemming_len        = 4
        min_infix_len           = 2
        index_exact_words       = 1
}

index topicsIndex
{
        source                  = topicsSource
        path                    = /var/lib/sphinxsearch/data/topicsIndex
        docinfo                 = extern
        dict                    = keywords
        mlock                   = 0
        morphology              = lemmatize_en_all, lemmatize_de

        min_word_len            = 3
        html_strip              = 1
        min_stemming_len        = 4
        min_infix_len           = 2
        index_exact_words       = 1
}

index policypapersIndex
{
        source                  = policypapersSource
        path                    = /var/lib/sphinxsearch/data/policypapersIndex
        charset_type            = utf-8
}

index papersIndex
{
        source                  = papersSource
        path                    = /var/lib/sphinxsearch/data/papersIndex
        charset_type            = utf-8
}
#############################################################################
## indexer settings
#############################################################################

indexer
{
        # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
        # optional, default is 128M, max is 2047M, recommended is 256M to 1024M
        mem_limit               = 128M

        # maximum IO calls per second (for I/O throttling)
        # optional, default is 0 (unlimited)
        #
        # max_iops              = 40


        # maximum IO call size, bytes (for I/O throttling)
        # optional, default is 0 (unlimited)
        #
        # max_iosize            = 1048576


        # maximum xmlpipe2 field length, bytes
        # optional, default is 2M
        #
        # max_xmlpipe2_field    = 4M


        # write buffer size, bytes
        # several (currently up to 4) buffers will be allocated
        # write buffers are allocated in addition to mem_limit
        # optional, default is 1M
        #
        # write_buffer          = 1M


        # maximum file field adaptive buffer size
        # optional, default is 8M, minimum is 1M
        #
        # max_file_field_buffer = 32M


        # how to handle IO errors in file fields
        # known values are 'ignore_field', 'skip_document', and 'fail_index'
        # optional, default is 'ignore_field'
        #
        # on_file_field_error = skip_document


        # lemmatizer cache size
        # improves the indexing time when the lemmatization is enabled
        # optional, default is 256K
        #
        # lemmatizer_cache = 512M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
        # [hostname:]port[:protocol], or /unix/socket/path to listen on
        # known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
        #
        # multi-value, multiple listen points are allowed
        # optional, defaults are 9312:sphinx and 9306:mysql41, as below
        #
        # listen                        = 127.0.0.1
        # listen                        = 192.168.0.1:9312
        # listen                        = 9312
        # listen                        = /var/run/searchd.sock
        listen                  = 127.0.0.1:9312
        listen                  = 127.0.0.1:9306:mysql41

        # log file, searchd run info is logged here
        # optional, default is 'searchd.log'
        log                     = /var/log/sphinxsearch/searchd.log

        # query log file, all search queries are logged here
        # optional, default is empty (do not log queries)
        query_log               = /var/log/sphinxsearch/query.log

        # client read timeout, seconds
        # optional, default is 5
        read_timeout            = 5

        # request timeout, seconds
        # optional, default is 5 minutes
        client_timeout          = 300

        # maximum amount of children to fork (concurrent searches to run)
        # optional, default is 0 (unlimited)
        max_children            = 30

        # maximum amount of persistent connections from this master to each agent host
        # optional, but necessary if you use agent_persistent. It is reasonable to set the value
        # as max_children, or less on the agent's hosts.
        persistent_connections_limit    = 30

        # PID file, searchd process ID file name
        # mandatory
        pid_file                = /var/run/sphinxsearch/searchd.pid

        # seamless rotate, prevents rotate stalls if precaching huge datasets
        # optional, default is 1
        seamless_rotate         = 1

        # whether to forcibly preopen all indexes on startup
        # optional, default is 1 (preopen everything)
        preopen_indexes         = 1

        # whether to unlink .old index copies on succesful rotation.
        # optional, default is 1 (do unlink)
        unlink_old              = 1

        # attribute updates periodic flush timeout, seconds
        # updates will be automatically dumped to disk this frequently
        # optional, default is 0 (disable periodic flush)
        #
        # attr_flush_period     = 900


        # MVA updates pool size
        # shared between all instances of searchd, disables attr flushes!
        # optional, default size is 1M
        mva_updates_pool        = 1M

        # max allowed network packet size
        # limits both query packets from clients, and responses from agents
        # optional, default size is 8M
        max_packet_size         = 8M

        # max allowed per-query filter count
        # optional, default is 256
        max_filters             = 256

        # max allowed per-filter values count
        # optional, default is 4096
        max_filter_values       = 4096


        # socket listen queue length
        # optional, default is 5
        #
        # listen_backlog                = 5


        # per-keyword read buffer size
        # optional, default is 256K
        #
        # read_buffer           = 256K


        # unhinted read size (currently used when reading hits)
        # optional, default is 32K
        #
        # read_unhinted         = 32K


        # max allowed per-batch query count (aka multi-query count)
        # optional, default is 32
        max_batch_queries       = 32


        # max common subtree document cache size, per-query
        # optional, default is 0 (disable subtree optimization)
        #
        # subtree_docs_cache    = 4M


        # max common subtree hit cache size, per-query
        # optional, default is 0 (disable subtree optimization)
        #
        # subtree_hits_cache    = 8M


        # multi-processing mode (MPM)
        # known values are none, fork, prefork, and threads
        # threads is required for RT backend to work
        # optional, default is threads
        workers                 = threads # for RT to work


        # max threads to create for searching local parts of a distributed index
        # optional, default is 0, which means disable multi-threaded searching
        # should work with all MPMs (ie. does NOT require workers=threads)
        #
        # dist_threads          = 4


        # binlog files path; use empty string to disable binlog
        # optional, default is build-time configured data directory
        #
        # binlog_path           = # disable logging
        # binlog_path           = /var/lib/sphinxsearch/data # binlog.001 etc will be created there


        # binlog flush/sync mode
        # 0 means flush and sync every second
        # 1 means flush and sync every transaction
        # 2 means flush every transaction, sync every second
        # optional, default is 2
        #
        # binlog_flush          = 2


        # binlog per-file size limit
        # optional, default is 128M, 0 means no limit
        #
        # binlog_max_log_size   = 256M


        # per-thread stack size, only affects workers=threads mode
        # optional, default is 64K
        #
        # thread_stack                  = 128K


        # per-keyword expansion limit (for dict=keywords prefix searches)
        # optional, default is 0 (no limit)
        #
        # expansion_limit               = 1000


        # RT RAM chunks flush period
        # optional, default is 0 (no periodic flush)
        #
        # rt_flush_period               = 900


        # query log file format
        # optional, known values are plain and sphinxql, default is plain
        #
        # query_log_format              = sphinxql


        # version string returned to MySQL network protocol clients
        # optional, default is empty (use Sphinx version)
        #
        # mysql_version_string  = 5.0.37


        # default server-wide collation
        # optional, default is libc_ci
        #
        # collation_server              = utf8_general_ci


        # server-wide locale for libc based collations
        # optional, default is C
        #
        # collation_libc_locale = ru_RU.UTF-8


        # threaded server watchdog (only used in workers=threads mode)
        # optional, values are 0 and 1, default is 1 (watchdog on)
        #
        # watchdog                              = 1


        # costs for max_predicted_time model, in (imaginary) nanoseconds
        # optional, default is "doc=64, hit=48, skip=2048, match=64"
        #
        # predicted_time_costs  = doc=64, hit=48, skip=2048, match=64


        # current SphinxQL state (uservars etc) serialization path
        # optional, default is none (do not serialize SphinxQL state)
        #
        # sphinxql_state                        = sphinxvars.sql


        # maximum RT merge thread IO calls per second, and per-call IO size
        # useful for throttling (the background) OPTIMIZE INDEX impact
        # optional, default is 0 (unlimited)
        #
        # rt_merge_iops                 = 40
        # rt_merge_maxiosize            = 1M


        # interval between agent mirror pings, in milliseconds
        # 0 means disable pings
        # optional, default is 1000
        #
        # ha_ping_interval              = 0


        # agent mirror statistics window size, in seconds
        # stats older than the window size (karma) are retired
        # that is, they will not affect master choice of agents in any way
        # optional, default is 60 seconds
        #
        # ha_period_karma                       = 60


        # delay between preforked children restarts on rotation, in milliseconds
        # optional, default is 0 (no delay)
        #
        # prefork_rotation_throttle     = 100


        # a prefix to prepend to the local file names when creating snippets
        # with load_files and/or load_files_scatter options
        # optional, default is empty
        #
        # snippets_file_prefix          = /mnt/common/server1/
}

#############################################################################
## common settings
#############################################################################

common
{
    lemmatizer_base = /usr/local/share/sphinx/dicts
}
